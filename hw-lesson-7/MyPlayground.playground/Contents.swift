import UIKit


import Foundation



/* –î–∏—Å–Ω–µ–π–ª–µ–Ω–¥.–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤. –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏: –º–∞–ª–æ –±–∞–ª–ª–æ–≤, –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è, –∫–∞—Ä—Ç–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞*/

enum CreditCertificateError: Error {
    case notEnoughPoints(pointRequired:Double)
    case certificateExspired
    case faultyCertificate
}

// –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å

struct attraction {
    var price: Double
}

// –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–æ–º–∏–Ω–∞–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –±–∞–ª–ª–∞—Ö, –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–ª–∞–Ω—Å, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞

class CreditCertificate {
    let denomination: Double = 0
    var balance: Double = 0
    var cardIsBlocked = false
    var cardIsBreak = false

/* –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –ø–æ—Å–µ—Ç–∏—Ç—å –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω, –Ω–∞–ª–∏—á–∏–µ –±–∞–ª–ª–æ–≤, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è */

    func buySession (attrachion: attraction ) throws {
        guard cardIsBlocked == false else {
            throw CreditCertificateError.certificateExspired
        }
        guard cardIsBreak == false else {
            throw CreditCertificateError.faultyCertificate
        }
        guard attrachion.price <= (denomination + self.balance)else {
            if balance < 0 {
            throw CreditCertificateError.notEnoughPoints(pointRequired: attrachion.price + denomination + balance)
            } else {
            throw CreditCertificateError.notEnoughPoints(pointRequired: attrachion.price + denomination - balance)
            }
        }
        balance = self.balance - attrachion.price
    }

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –±–∞–ª–ª–∞–º–∏ üí∑

    func depositPoints (somePoints: Double) {
        balance = self.balance + somePoints
    }

// —Ñ—É–Ω–∫—Ü–∏—è "–∂–∏–≤–æ–π –±–∞–ª–∞–Ω—Å"ü§°

    func printBalance() {
        print ("–ù–∞ –≤–∞—à–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ \(balance) –±–∞–ª–ª–æ–≤")
    }

// –≤–æ–∑–º–æ–∂–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –µ—Å–ª–∏ —Å–µ–∞–Ω—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ü•∂

    func changeCertificateState(cardIsBloced: Bool){
        switch cardIsBloced {
        case true:
            self.cardIsBlocked = true
        case false:
            self.cardIsBlocked = false
        }
    }

// —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –∏—Å–ø—Ä–∞–≤–µ–Ω

    func changeCertificateStatus(cardIsBreak: Bool){
        switch cardIsBreak {
            case true:
                self.cardIsBreak = true
            case false:
                self.cardIsBreak = false
        }
    }
}

// –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫

extension CreditCertificateError: CustomStringConvertible {
    var description: String {
        switch self {
        case .notEnoughPoints( let pointRequired): return "–ù–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞.  –í–∞—à –±–∞–ª–ª–∞–Ω—Å: \(operation.balance) –±–∞–ª–ª–æ–≤, –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ \(pointRequired) –±–∞–ª–ª–æ–≤)"
        case .certificateExspired: return "–í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.–ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            case .faultyCertificate: return "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞"
        }
    }
}

// –≤–ø–µ—Ä–µ–¥ –≤ –¥–∏—Å–Ω–µ–π–ª–µ–Ω–¥))üéØ

let operation = CreditCertificate()
do {
    try operation.buySession(attrachion:  .init(price: 1500.0))
} catch let error as CreditCertificateError {
    print(error.description)
}

operation.printBalance()
operation.depositPoints(somePoints: 5000.0)
operation.printBalance()

do {
    try operation.buySession(attrachion: .init(price: 2500.0))
} catch let error as CreditCertificateError {
    print(error.description)
}

operation.printBalance()

do{
    try operation.buySession(attrachion: .init(price: 3754.00))
} catch let error as CreditCertificateError {
    print(error.description)
}

operation.printBalance()

/* –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –≤—Ä–µ–º—è —Å–µ–∞–Ω—Å–∞. —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏. –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω */

operation.changeCertificateState(cardIsBloced: false)

do{
    try operation.buySession(attrachion: .init(price: 2500.00))
} catch let error as CreditCertificateError{
    print(error.description)
}

/* —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –∏—Å–ø—Ä–∞–≤–µ–Ω, –º—ã –Ω–µ –≤ –∫—É—Ä—Å–µ –∏ –∏–¥–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω */

operation.changeCertificateStatus(cardIsBreak: true)

do{
    try operation.buySession(attrachion: .init(price: 1700.00))
} catch let error as  CreditCertificateError{
    print(error.description)
}

    
